package generated

import (
	"bytes"
	"compress/gzip"
	"io"
)

func init() {
	EmbeddedFiles["stat.lua"] = stat_lua
}

// stat_lua returns raw, uncompressed file data.
func stat_lua() []byte {
	gz, err := gzip.NewReader(bytes.NewBuffer([]byte{
0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xb4,0x56,
0x6d,0x8b,0x1b,0x37,0x10,0xfe,0xbe,0xbf,0x62,0x38,0x08,0xe7,
0xbd,0xf3,0xfa,0x6c,0xb7,0xf1,0x87,0xc0,0xb6,0x04,0x62,0x42,
0x08,0x85,0x92,0x0b,0xa5,0xa5,0x04,0xa3,0xb3,0xc6,0x37,0x6a,
0x76,0xa5,0x45,0xd2,0xfa,0x85,0x34,0xfd,0xed,0x45,0xda,0x37,
0xc9,0x6b,0x37,0x94,0xd2,0xfd,0xe2,0xd5,0x68,0x34,0xf3,0xcc,
0xa3,0x79,0xc6,0x9b,0x65,0xf0,0x19,0x4f,0x20,0x38,0x4c,0x5e,
0xff,0xf9,0x26,0x85,0x3d,0x2b,0x6a,0x4c,0xb2,0x0c,0x96,0xf0,
0x1e,0x4f,0x06,0x98,0xe4,0xb0,0x84,0xd7,0x1f,0xde,0x3e,0x26,
0x49,0xa1,0xb6,0xac,0xf0,0xee,0x39,0xbc,0x5f,0xff,0xf6,0xf8,
0xfb,0xe2,0x53,0x6b,0x13,0xbc,0x33,0x2d,0x3b,0x93,0x3d,0x55,
0x08,0xb9,0x3b,0xf9,0xcb,0xe0,0x67,0x58,0x59,0x15,0xce,0x6c,
0x95,0xac,0xcb,0x27,0xd4,0x13,0xbf,0xbf,0xfc,0x94,0x76,0xd1,
0x8d,0x65,0x16,0x9b,0x14,0xc6,0x6a,0x21,0x9f,0x67,0x3b,0xa5,
0x4b,0x66,0x27,0x37,0x25,0x5a,0x2d,0xb6,0xaf,0x5e,0x98,0x57,
0x2f,0xcc,0xcd,0xd4,0xc1,0x98,0x82,0xe0,0x69,0x7b,0x4e,0xaa,
0x03,0xe4,0xa0,0x91,0x0b,0x33,0xdb,0xb2,0xa2,0x98,0xdc,0x7e,
0x7c,0xf7,0xd3,0xfa,0x36,0x75,0xb9,0x5d,0x39,0x8d,0x17,0x19,
0xb4,0x17,0x83,0xbb,0xb4,0x6d,0x60,0xa9,0x38,0x76,0x51,0x3d,
0x1b,0x90,0xc3,0x97,0xaf,0x01,0xbc,0xfe,0x55,0x69,0xe4,0x67,
0x49,0xdf,0xae,0x3f,0xde,0x4e,0xfb,0x22,0xfa,0xaa,0xca,0x8d,
0x15,0x25,0x1a,0xcb,0xca,0x0a,0x72,0x98,0x94,0xcc,0xd2,0x6c,
0x57,0x28,0xa5,0x27,0x0e,0xf7,0x03,0x7c,0x37,0x9f,0xa7,0x70,
0xd7,0xfc,0xdc,0xbb,0x9f,0xf6,0x1c,0x7d,0xeb,0xdc,0xaa,0x3d,
0xb8,0x6a,0x4f,0xae,0xe6,0xf3,0x2e,0x27,0x17,0xbb,0x1d,0x6a,
0x94,0x56,0xb0,0xc2,0x31,0xee,0xef,0x23,0x87,0x9b,0x37,0x37,
0x49,0x22,0x76,0x1d,0x7c,0x4b,0x28,0x13,0x00,0xe8,0x4b,0xdd,
0xfe,0x61,0x94,0x9c,0x71,0xdc,0x2a,0x8e,0x93,0xc6,0x29,0x4d,
0xb0,0x30,0x18,0x79,0x7d,0xf1,0x2b,0xf7,0x14,0xcc,0xd8,0x4d,
0x5d,0x71,0x66,0x9d,0x5d,0xaa,0xc3,0xb4,0xdf,0x2a,0x37,0x6c,
0xff,0x0c,0x39,0xcc,0x43,0x53,0xc9,0x8e,0xe7,0x26,0xab,0xac,
0x87,0x18,0x19,0xa5,0x1e,0xb9,0x05,0x54,0x04,0xab,0xd0,0xa5,
0xd2,0xb8,0x17,0xaa,0x36,0x11,0x42,0xf7,0x8c,0x80,0x78,0xff,
0x73,0x28,0xee,0x09,0xb3,0x04,0x5b,0x5f,0xa7,0x49,0xff,0x4e,
0xe3,0xba,0x68,0x5c,0x17,0x5d,0xaa,0x8b,0x46,0x75,0xc5,0x57,
0x4c,0x97,0xea,0xa2,0xff,0xb7,0x2e,0xff,0x93,0xa0,0xe4,0x5d,
0xe7,0x08,0x59,0xd5,0x76,0xd3,0x6b,0xb5,0x79,0xf1,0x4d,0x13,
0xf5,0x54,0xdf,0x3a,0xcd,0x29,0xd7,0x08,0x90,0x37,0x1d,0x32,
0x73,0x0b,0xbf,0x27,0x76,0x20,0x95,0x1d,0x75,0x9b,0x7b,0xb2,
0x0c,0xa4,0x82,0xbe,0xb4,0x66,0xf2,0x74,0x9b,0x43,0x98,0x01,
0x41,0xb7,0xa7,0xd1,0xd6,0xba,0x89,0xe3,0x51,0x0f,0x18,0x1c,
0xbe,0xde,0x1f,0x32,0x88,0x61,0x1c,0x5c,0xff,0x0f,0x81,0xbb,
0xae,0x3d,0x07,0x75,0x20,0x66,0xc1,0x90,0xaa,0x0b,0x0e,0x07,
0x04,0xae,0x80,0x50,0xe3,0x8f,0xd7,0xd2,0xfb,0xf0,0x31,0x63,
0x1e,0xc6,0x03,0x78,0x91,0x66,0xe3,0x8c,0x69,0x72,0xad,0x42,
0x5f,0xce,0x18,0xa1,0xd7,0x95,0x9b,0x62,0x96,0x10,0x24,0x1e,
0x2d,0x2c,0xe1,0xa9,0x50,0xdb,0xcf,0x06,0xaa,0xda,0x10,0x1a,
0x50,0x05,0x47,0xdd,0xaa,0x93,0x99,0x81,0xd4,0x9d,0xd2,0xf0,
0xa4,0x2c,0xb9,0xc3,0x2f,0x4b,0x3f,0xcd,0x17,0xd4,0x66,0x33,
0x7e,0x30,0x3a,0x8f,0x97,0xa5,0xbb,0xdc,0x26,0x6f,0xa8,0xb3,
0xbf,0x22,0xa1,0x0d,0x44,0xb9,0x9b,0xc3,0x43,0x9b,0x4e,0x18,
0x10,0x12,0x98,0xb7,0x98,0x42,0xd9,0xa0,0xb8,0x2b,0x82,0x6c,
0x9a,0xb6,0x73,0x61,0xfb,0xe7,0x40,0xc2,0xbe,0x75,0xbb,0xad,
0x92,0x1d,0x87,0xad,0xb0,0x81,0x47,0x50,0xbb,0x2e,0x8e,0x92,
0x5f,0x19,0x18,0x91,0x4f,0xab,0x95,0xc8,0xd6,0x8a,0x2a,0x8e,
0xd5,0x69,0x39,0xb2,0x36,0x62,0x6e,0xae,0xad,0xe5,0x72,0x41,
0x03,0x97,0x14,0x73,0x49,0xff,0x85,0xcb,0x2b,0x43,0x20,0xe4,
0x92,0xae,0x73,0x49,0xdf,0xe2,0x72,0x34,0x78,0x22,0x2e,0xaf,
0x0e,0xa9,0xc8,0x67,0xcc,0x25,0x5d,0xe0,0x92,0x2e,0x72,0x49,
0xe7,0x5c,0x3a,0xed,0x0c,0x02,0x1d,0x38,0x4a,0x22,0xee,0x83,
0xc5,0x3d,0x2c,0x92,0xf3,0xdb,0x8a,0xd7,0xf7,0x91,0x4e,0xdd,
0x35,0x45,0xba,0xfd,0x21,0x6a,0x8a,0xf8,0x8f,0xb1,0xef,0x94,
0x28,0x82,0xc3,0x1a,0x37,0x4d,0x9c,0xf0,0x21,0xc0,0xd7,0xe9,
0x9a,0x42,0xe0,0x14,0x03,0xa7,0x33,0xe0,0xf4,0xef,0x80,0xd3,
0x25,0xe0,0xf4,0xcf,0xc0,0x69,0x13,0x77,0x50,0x0c,0x9c,0x3c,
0xf0,0x76,0xb6,0x32,0xcb,0xfa,0xef,0x03,0x94,0xfe,0xfb,0xc0,
0x7b,0xa5,0x49,0xf8,0x05,0xf4,0x18,0x7d,0x01,0x4d,0xfd,0xb1,
0xd8,0x63,0xfd,0xeb,0xcf,0xef,0x3e,0xac,0x23,0xa7,0xe5,0xf7,
0x77,0xab,0xf9,0xdd,0x6a,0x9e,0x3a,0x39,0xe0,0xb1,0x12,0x1a,
0x1b,0x21,0x70,0x76,0x4a,0xfe,0x0e,0x00,0x00,0xff,0xff,0x6a,
0xae,0x77,0x22,0xa3,0x0a,0x00,0x00,
	}))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	var b bytes.Buffer
	io.Copy(&b, gz)
	gz.Close()

	return b.Bytes()
}